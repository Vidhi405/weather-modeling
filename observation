1. Requirements Analysis and Specification

    Define the scope:
    Build a model to predict daily temperatures using a quadratic function.
    Compare predictions with real, observed temperature data.

    Gather inputs:
    Input includes realistic hourly temperatures from 6 AM to 8 PM.
    Data is used to fit and validate the model.

    Determine accuracy requirements:
    The model should peak around noon and follow realistic daily trends.
    Accuracy is visually verified against actual data.

    Specify output format:
    Outputs include a printed table and a plotted graph.
    The graph compares predicted and actual temperature values.

    Document requirements:
    Requirements can be compiled into an SRS document.
    This outlines inputs, outputs, and accuracy goals.

2. Design

    System Architecture:
    The system includes data input, quadratic modeling, and output display.
    All components are contained in one script.

    Quadratic Model Design:
    A 2nd-degree polynomial fits temperatures at 6 AM, 12 PM, and 6 PM.
    Coefficients are calculated using NumPy.

    Data Handling:
    Time and temperature data are processed as arrays.
    Values are cleaned and mapped evenly from 6 AM to 8 PM.

    User Interface:
    Uses Matplotlib to generate a labeled temperature plot.
    Users can easily compare predicted and real values.

3. Implementation

    Coding:
    Python code uses NumPy for math and Matplotlib for plotting.
    It calculates predictions and displays results visually.

    Unit Testing:
    Verified theoretical temperatures and correct plot labels.
    Ensured model logic is functioning as expected.

    Integration:
    Combined data processing, modeling, and plotting into one flow.
    Script runs as a complete working system.

4. Testing and Integration

    System Testing:
    Tested full script execution and correct curve plotting.
    Checked that the output matches the expected trend.

    Verification:
    Compared model output with actual data for validation.
    Confirmed that peak occurs near 12 NOON.

    User Acceptance Testing (UAT):
    The clear graph helps users verify accuracy easily.
    Visual presentation supports user understanding.

5. Deployment and Maintenance

    Deployment:
    Can run on any local machine with Python installed.
    Easily extendable for web deployment if needed.

    Maintenance:
    Data and logic can be updated as needed.
    Structure allows for quick adjustments or upgrades.
